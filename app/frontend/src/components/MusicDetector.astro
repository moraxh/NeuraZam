---
  import { Icon } from 'astro-icon/components'
  import { Image } from 'astro:assets'

  import unknownImage from '@assets/unknown_image.png'

  import Spinner from './Spinner.astro'
  import SpinnerFailed from './SpinnerFailed.astro'
---

<dialog id="stateDialog" class="bg-transparent backdrop:bg-black/70 border-none outline-none absolute min-w-screen w-screen min-h-screen h-screen text-center z-50 top-0">
  <div id="stateVerbose" class="flex flex-col justify-start items-center gap-10 sm:gap-20 py-16 px-5 sm:py-27 sm:px-10 h-full">
    <section class="flex flex-col justify-center gap-2">
      <h2 class="text-3xl sm:text-7xl font-bold">The model is being trained</h2>
      <p class="sm:text-3xl opacity-60">Please wait until the process is finished...</p>
    </section>

    <!-- Spinner -->
    <section id="spinner" class="flex justify-center items-center h-full">
      <Spinner />
    </section>

    <!-- Chart and progress bar -->
    <section id="chart_progress" class="flex flex-col justify-between h-full" hidden>
      <div class="h-64 sm:h-96 flex justify-center items-center">
        <canvas class="max-w-[90vw]" id="modelTrainingChart"></canvas>
      </div>

      <div class="flex flex-col gap-2 items-center justify-center w-full max-w-screen">
        <p id="modelTrainingProgressText" class="text-5xl sm:text-7xl">50%</p>
        <progress id="modelTrainingProgress" class="w-[900px] max-w-[90%] h-2 sm:h-2.5" max="100" value="0"></progress>
        <p id="modelTrainingETA" class="text-white/50 text-lg"></p>
      </div>
    </section>
  </div>

  <div id="stateFailed" class="flex flex-col justify-start items-center gap-20 py-16 px-5 sm:py-27 sm:px-10 h-full" hidden>
    <section class="flex flex-col justify-center gap-2">
      <h2 class="text-5xl sm:text-7xl font-bold">Cannot connect to the server</h2>
      <p class="text-xl sm:text-3xl opacity-60">Retrying the connection...</p>
    </section>

    <!-- Spinner failed -->
    <section id="spinner" class="flex justify-center items-center h-full">
      <SpinnerFailed />
    </section>
  </div>
</dialog>

<dialog id="predictionDialog" class="bg-transparent backdrop:bg-black/70 border-none outline-none absolute min-w-screen w-screen min-h-screen h-screen text-center z-50 top-0">
  <div id="predictSection" hidden class="bg-neutral-900 border-neutral-700 border-2 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col justify-start items-center m-auto w-96 rounded-2xl p-5 gap-5">
    <p class="text-2xl !text-white/70">You are listening...</p>
    <section class="w-full h-full flex flex-col gap-5 items-center">
      <div class="h-70">
        <img class="cover absolute h-70 left-1/2 -translate-x-1/2 w-auto rounded-xl aspect-square object-center z-10" src="https://picsum.photos/200" alt="Cover Image">
        <img class="cover absolute h-70 left-1/2 -translate-x-1/2 w-auto rounded-xl aspect-square object-center blur" src="https://picsum.photos/200" alt="Cover Image">
      </div>
      <div class="flex flex-col items-center gap-2">
        <h2 id="songName" class="text-3xl">SongName</h2>
        <h3 id="artistName" class="text-2xl !text-white/80">artistName</h3>
        <p id="genres" class="text-xl !text-white/30">Generos</p>
      </div>
    </section>
    <button class="closeBtn glow bg-primary rounded-full w-[80%] h-12 hover:cursor-pointer hover:bg-primary/80 text-xl">
      Ok
    </button>
  </div>

  <div id="unknownSection" class="bg-neutral-900 border-neutral-700 border-2 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col justify-start items-center m-auto w-96 rounded-2xl p-5 gap-5">
    <p class="text-2xl !text-white/70">Ups... we couldn't identify the song</p>

    <section class="w-full h-full flex flex-col gap-5 items-center">
      <div class="h-56">
        <Image src={unknownImage} class="absolute h-56 left-1/2 -translate-x-1/2 w-auto object-contain mix-blend-lighten" alt="Unknown Image" />
        <Image src={unknownImage} class="absolute h-56 left-1/2 -translate-x-1/2 w-auto object-contain mix-blend-lighten blur opacity-30" alt="Unknown Image" />
      </div>
    </section>
    <button class="closeBtn glow bg-primary rounded-full w-[80%] h-12 hover:cursor-pointer hover:bg-primary/80 text-xl">
      Ok
    </button>
  </div>
</dialog>

<section class="flex items-center justify-center w-full pt-40">
  <div id="listeningButton">
    <button class="bg-radial bigGlow from-primary to-secondary transition-all w-60 h-60 rounded-full flex justify-center items-center hover:cursor-pointer hover:scale-105 hover:brightness-90 hover:*:scale-[115%]">
      <Icon class="w-20 h-20" name="lucide:mic" />
    </button>
  </div>
</section>

<style>
  @import url('../styles/global.css');

  .bigGlow {
    filter: drop-shadow(0 0 2rem var(--color-primary-50));
  }

  .glow {
    filter: drop-shadow(0 0 1rem var(--color-primary-50));
  }

  dialog {
    transition: all .2s ease-in-out;
    opacity: 0;
    scale: .5;
  }

  dialog.show {
    opacity: 1;
    scale: 1;
  }

  dialog.show[open]::backdrop {
    animation: backdropBlur .2s ease-in-out forwards;
    animation-delay: .2s;
  }

  @keyframes backdropBlur {
    0% {
      backdrop-filter: blur(0px);
    }
    100% {
      backdrop-filter: blur(5px);
    } 
  }

  #modelTrainingProgress::-webkit-progress-bar {
    @apply rounded-full overflow-hidden bg-zinc-800;
  }

  #modelTrainingProgress::-webkit-progress-value {
    @apply bg-white;
  }

  @keyframes rippleAnimation {
    100% {
      transform: scale(1.4);
      opacity: 0;
    }
  }

  .listening,
  .listening > * {
    position: relative;
    z-index: 1;
  }

  .listening::before,
  .listening::after {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: linear-gradient(
      45deg,
      var(--color-secondary),
      var(--color-primary)
    );
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
  }

  .listening:before {
    z-index: 0;
    animation: 1s ease-out rippleAnimation infinite;
  }

  .listening::after {
    z-index: 0;
    animation: 1s .5s ease-out rippleAnimation infinite;
  }
</style>

<script>
  import { ChartManager, UIManager } from "../lib/chartManager"
  import type { TrainingData } from "../lib/chartManager"

  interface Prediction {
    id: number
    name: string,
    artist: string,
    genres: string,
    path: string,
    cover_url: string
  }

  class WebSocketManager {
    private socket: WebSocket | null = null
    private readonly reconnectDelay = 5000
    private readonly serverUrl: string
    public onMessage: (message: any) => void
    private readonly onClose: () => void
    private readonly onError: () => void

    constructor(
      serverUrl: string,
      onMessage: (message: any) => void,
      onClose: () => void,
      onError: () => void
    ) {
      this.serverUrl = serverUrl
      this.onMessage = onMessage
      this.onClose = onClose
      this.onError = onError
    }

    public connect(): void {
      this.socket = new WebSocket(this.serverUrl)

      this.socket.addEventListener("open", () => {
        console.log(`Connected to the server at ${this.serverUrl}`)
      })

      this.socket.addEventListener("message", (event) => {
        try {
          const message = JSON.parse(event.data)
          this.onMessage(message)
        } catch (error) {
          console.error(`Error parsing message: ${error}`)
        }
      })

      this.socket.addEventListener("close", () => {
        console.log(`Disconnected from the server at ${this.serverUrl}`)
        this.onClose()
        this.attemptReconnect()
      })

      this.socket.addEventListener("error", (error) => {
        console.error(`WebSocket error: ${error}`)
        this.onError()
        this.socket?.close()
      })
    }

    private attemptReconnect(): void {
      setTimeout(() => this.connect(), this.reconnectDelay)
    }

    public send(data: any): void {
      if (this.socket && this.socket.readyState === WebSocket.OPEN) {
        this.socket.send(JSON.stringify(data))
      } else {
        console.error("WebSocket is not open. Cannot send data.")
      }
    }

    public close(): void {
      if (this.socket) {
        this.socket.close()
      }
    }

    public setOnMessage(callback: (message: any) => void): void {
      this.onMessage = callback
    }
  }

  class StateDialogManager {
    private readonly dialog: HTMLDialogElement
    private readonly verboseSection: HTMLDivElement
    private readonly failedSection: HTMLDivElement
    private readonly spinner: HTMLDivElement
    private readonly chartProgress: HTMLDivElement
    private readonly heading: HTMLHeadingElement
    private readonly paragraph: HTMLParagraphElement

    constructor(dialogId: string) {
      this.dialog = document.getElementById(dialogId) as HTMLDialogElement

      if (!this.dialog) {
        throw new Error(`Dialog with ID ${dialogId} not found`)
      }

      this.verboseSection = this.dialog.querySelector("#stateVerbose") as HTMLDivElement
      this.failedSection = this.dialog.querySelector("#stateFailed") as HTMLDivElement
      this.spinner = this.dialog.querySelector("#spinner") as HTMLDivElement
      this.chartProgress = this.dialog.querySelector("#chart_progress") as HTMLDivElement
      this.heading = this.dialog.querySelector("h2") as HTMLHeadingElement
      this.paragraph = this.dialog.querySelector("p") as HTMLParagraphElement

      this.validateElements()
    }

    private validateElements(): void {
      if (!this.verboseSection || !this.failedSection || !this.spinner || !this.chartProgress || !this.heading || !this.paragraph) {
        throw new Error("One or more required elements are missing in the dialog")
      }
    }

    public showVerbose(): void {
      this.verboseSection.hidden = false
      this.failedSection.hidden = true
      this.showDialog()
    }

    public showFailed(): void {
      this.verboseSection.hidden = true
      this.failedSection.hidden = false
      this.showDialog()
    }

    private showDialog(): void {
      this.dialog.showModal()
      this.dialog.classList.add("show")
    }

    public hideDialog(): void {
      this.dialog.classList.remove("show")
      setTimeout(() => {
        this.dialog.close()
      }, 200)
    }

    public showSpinner(): void {
      this.spinner.hidden = false
      this.chartProgress.hidden = true
    }

    public showChart(): void {
      this.spinner.hidden = true
      this.chartProgress.hidden = false
    }

    public updateHeading(text: string): void {
      this.heading.innerText = text
    }

    public updateParagraph(text: string): void {
      this.paragraph.innerText = text
    }
  }

  class AudioRecorder {
    private predictionDialogManager: PredictionDialogManager
    private mediaRecorder: MediaRecorder | null = null
    private recordingInterval: NodeJS.Timeout | null = null
    private recordingTimout: NodeJS.Timeout | null = null
    private currentStream: MediaStream | null = null
    private isStopping = false
    private predictions: Prediction[] = []
    private readonly webSocket: WebSocketManager
    private readonly listeningButtonAnimator: ListeningButtonAnimator

    constructor(webSocket: WebSocketManager, listeningButtonAnimator: ListeningButtonAnimator, predictionDialogManager: PredictionDialogManager, predictions: Prediction[]) { 
      this.webSocket = webSocket
      this.listeningButtonAnimator = listeningButtonAnimator
      this.predictionDialogManager = predictionDialogManager
      this.predictions = predictions
    }

    public async start(maxDuration = 40000, transmissionInterval = 3000): Promise<void> {
      this.stop()

      try {
        await this.startRecordingCycle(transmissionInterval)

        this.recordingInterval = setInterval(() => {
          this.startRecordingCycle(transmissionInterval)
        }, transmissionInterval)

        this.recordingTimout = setTimeout(() => {
          this.stop()
          this.predictions.length = 0
          this.listeningButtonAnimator.stopAnimation()
          this.predictionDialogManager.showUnknown()
        }, maxDuration)
      } catch (error) {
        this.handleError(error as Error)
      }
    }

    private async startRecordingCycle(transmissionInterval: number): Promise<void> {
      if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
        this.mediaRecorder.stop()
      }

      if (this.currentStream) {
        this.currentStream.getTracks().forEach((track) => track.stop())
        this.currentStream = null
      }

      this.currentStream = await navigator.mediaDevices.getUserMedia({ audio: true })
      this.mediaRecorder = new MediaRecorder(this.currentStream, {
        mimeType: "audio/webm; codecs=opus",
        audioBitsPerSecond: 128000
      })

      this.mediaRecorder.ondataavailable = (event) => {
        if (this.isStopping) return
        if (event.data.size > 0) {
          const blob = new Blob([event.data], { type: "audio/webm; codecs=opus" })

          const reader = new FileReader()
          reader.readAsDataURL(blob)
          reader.onloadend = () => {
            const base64data = reader.result as string
            const base64Audio = base64data.split(",")[1]
            this.webSocket.send({
              action: "predict",
              data: base64Audio
            })
          }
        }
      }

      this.mediaRecorder.onstop = () => {
        this.mediaRecorder = null
        this.isStopping = false
      }

      this.mediaRecorder.start()

      setTimeout(() => {
        if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
          this.mediaRecorder.requestData()
          this.mediaRecorder.stop()
        }
      }, transmissionInterval)
    }

    private handleError(error: Error): void {
      const errorMessages: Record<string, string> = {
        NotAllowedError: "Microphone access denied. Please allow access to the microphone in your browser settings.",
        NotFoundError: "No microphone found. Please connect a microphone and try again.",
        NotReadableError: "Microphone is not readable. Please check your microphone settings.",
        OverconstrainedError: "Microphone constraints are not met. Please check your microphone settings."
      }

      if (error.name in errorMessages) {
        alert(errorMessages[error.name])
      } else {
        console.error("Error starting audio recording: ", error)
      }
    }

    public stop(): void {
      this.isStopping = true
      if (this.mediaRecorder && this.mediaRecorder.state === "recording") {
        this.mediaRecorder.stop()
      }

      if (this.currentStream) {
        this.currentStream.getTracks().forEach((track) => track.stop())
        this.currentStream = null
      }

      if (this.recordingInterval) {
        clearInterval(this.recordingInterval)
        this.recordingInterval = null
      }

      if (this.recordingTimout) {
        clearTimeout(this.recordingTimout)
        this.recordingTimout = null
      }
    }
  }

  class ListeningButtonAnimator {
    private readonly button: HTMLElement

    constructor(buttonId: string) {
      this.button = document.getElementById(buttonId) as HTMLElement

      if (!this.button) {
        throw new Error(`Button with ID ${buttonId} not found`)
      }
    }

    public startAnimation(): void {
      this.button.classList.add("listening")
    }

    public stopAnimation(): void {
      this.button.classList.remove("listening") 
    }

    public isAnimating(): boolean {
      return this.button.classList.contains("listening")
    }
  }

  class PredictionDialogManager {
    private readonly dialog: HTMLDialogElement
    private readonly predictionSection: HTMLDivElement
    private readonly unknownSection: HTMLDivElement
    private readonly songName: HTMLHeadingElement
    private readonly artistName: HTMLHeadingElement 
    private readonly genres: HTMLParagraphElement
    private readonly covers: NodeListOf<HTMLImageElement>

    constructor(dialogId: string) {
      this.dialog = document.getElementById(dialogId) as HTMLDialogElement

      if (!this.dialog) {
        throw new Error(`The dialog element was not found: ${dialogId}`)
      }

      this.predictionSection = this.dialog.querySelector("#predictSection") as HTMLDivElement
      this.unknownSection = this.dialog.querySelector("#unknownSection") as HTMLDivElement

      this.songName = this.dialog.querySelector("#songName") as HTMLHeadingElement
      this.artistName = this.dialog.querySelector("#artistName") as HTMLHeadingElement
      this.genres = this.dialog.querySelector("#genres") as HTMLParagraphElement
      this.covers = this.dialog.querySelectorAll(".cover")


      // Listeners
      this.dialog.querySelectorAll(".closeBtn").forEach((button) => {
        (button as HTMLButtonElement).addEventListener("click", () => {
          this.hide()
        })
      })

      this.dialog.addEventListener("click", (e) => {
        const target = e.target as HTMLElement

        if (target.id == dialogId) {
          this.hide()
        }
      })
    }

    public show() {
      this.dialog.classList.add("show")
      this.dialog.showModal()
    }

    public showPrediction(songName: string, artistName: string, genres: string[], cover_url: string) {
      this.predictionSection.hidden = false
      this.unknownSection.hidden = true

      this.songName.innerHTML = songName 
      this.artistName.innerHTML = artistName
      this.genres.innerHTML = genres.join(', ')

      const timer = setTimeout(() => {
        this.show()
      }, 1000)

      let loadedCount = 0
      this.covers.forEach(cover => {
        cover.onload = () => {
          loadedCount++
          if (loadedCount >= this.covers.length) {
            clearTimeout(timer)
            this.show()
          }
        }
        cover.src = cover_url
      })
    }

    public showUnknown() {
      this.predictionSection.hidden = true
      this.unknownSection.hidden = false

      this.show()
    }

    public hide() {
      this.dialog.classList.remove("show")

      setTimeout(() => {
        this.dialog.close()
      }, 200)
    }
  }

  function initializeServerState(): void {
    const modelTrainingChart = document.getElementById("modelTrainingChart") as HTMLCanvasElement
    const modelTrainingProgress = document.getElementById("modelTrainingProgress") as HTMLProgressElement
    const modelTrainingProgressText = document.getElementById("modelTrainingProgressText") as HTMLParagraphElement
    const modelTrainingETA = document.getElementById("modelTrainingETA") as HTMLParagraphElement

    if (!modelTrainingChart || !modelTrainingProgress || !modelTrainingProgressText || !modelTrainingETA) {
      console.error("One or more required elements are missing")
      return
    }

    const uiManager = new UIManager(modelTrainingProgress, modelTrainingProgressText, modelTrainingETA)
    const chartManager = new ChartManager(modelTrainingChart, uiManager)
    const dialogManager = new StateDialogManager("stateDialog")

    const handleServerMessage = (message: any) => {
      if (message.state === "ready") {
        dialogManager.hideDialog()
        return
      } else {
        dialogManager.showVerbose()
      }

      if (message.state === "training_model") {
        dialogManager.showChart()
      } else {
        dialogManager.showSpinner()
      }

      const stateHeadings: Record<string, string> = {
        loading_server: "The server is loading",
        downloading_songs: "Downloading songs",
        downloading_metadata: "Downloading song's metadata",
        processing_songs: "Processing songs",
        loading_model: "The model is loading",
        training_model: "The model is being trained",
        storing_embeddings: "Storing embeddings",
      }

      if (message.state in stateHeadings) {
        dialogManager.updateHeading(stateHeadings[message.state])
      }

      if (message.state === "training_model" && message.data) {
        const data = message.data as TrainingData
        chartManager.update(data)
      }
    }

    const stateWebSocketManager = new WebSocketManager(
      "ws://localhost:5000",
      handleServerMessage,
      () => dialogManager.showFailed(),
      () => dialogManager.showFailed()
    )

    stateWebSocketManager.connect()
  }

  function initializePredictionServer(): WebSocketManager {
    const predictWebSocketManager = new WebSocketManager(
      "ws://localhost:5001",
      (message) => {},
      () => console.log("Disconnected from the prediction server"),
      () => console.error("Error connecting to the prediction server")  
    )

    predictWebSocketManager.connect()

    return predictWebSocketManager
  }

  function initializeListeningButton(): void {
    const predictionDialog = new PredictionDialogManager("predictionDialog")
    const predictionSocket = initializePredictionServer()
    const predictions: Prediction[] = []
    const buttonAnimator = new ListeningButtonAnimator("listeningButton")
    const audioRecorder = new AudioRecorder(predictionSocket, buttonAnimator, predictionDialog, predictions)

    const predictionOnMessage = (message: any) => {
      if (message.prediction) {
        const prediction = message.prediction as Prediction

        console.log(prediction)
        predictions.push(prediction)

        if (predictions.length >= 3) {
          // Check if any prediction is more than 50% times 
          const predictionCounts: Record<string, number> = {}
          predictions.forEach((pred) => {
            predictionCounts[pred.id] = (predictionCounts[pred.id] || 0) + 1
          })
          const winnerPrediction = Object.entries(predictionCounts).filter(([key, value]) => {
            return value > Math.floor(predictions.length / 2)
          })

          if (winnerPrediction.length > 0) {
            const winnerId = parseInt(winnerPrediction[0][0])
            const winner = predictions.find((pred) => pred.id === winnerId)

            if (winner) {
              const name = winner.name
              const artist = winner.artist
              const genres = JSON.parse(winner.genres.replace(/'/g, '"'))
              const cover_url = winner.cover_url

              predictionDialog.showPrediction(name, artist, genres, cover_url)
              // Clear the predictions
              predictions.length = 0
              // Stop the audio recorder
              audioRecorder.stop()
              buttonAnimator.stopAnimation()
            }
          }
        }
      }
    }

    predictionSocket.setOnMessage(predictionOnMessage)

    const listeningButton = document.getElementById("listeningButton") as HTMLElement
    if (!listeningButton) {
      console.error("Listening button not found")
      return
    }

    listeningButton.addEventListener("click", () => {
      if (!buttonAnimator.isAnimating()) {
        buttonAnimator.startAnimation()
        audioRecorder.start()
      } else {
        audioRecorder.stop()
        buttonAnimator.stopAnimation()
      }
    })
  }

  function initializeApp(): void {
    initializeServerState()
    initializeListeningButton()
  }

  initializeApp()
</script>